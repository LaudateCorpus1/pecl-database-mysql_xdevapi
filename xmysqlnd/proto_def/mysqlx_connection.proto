/*
  +----------------------------------------------------------------------+
  | PHP Version 7                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) The PHP Group                                          |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.01 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_01.txt                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
*/
syntax = "proto2";

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

import "mysqlx_datatypes.proto";
import "mysqlx.proto";

/**
@namespace Mysqlx::Connection
*/
package Mysqlx.Connection;
option java_package = "com.mysql.cj.x.protobuf";

/**
Capability

A tuple of a ``name`` and a @ref Mysqlx::Datatypes::Any
*/
message Capability {
  required string name = 1;
  required Mysqlx.Datatypes.Any value = 2;
}

/**
Capabilities

list of Capability
*/
message Capabilities {
  repeated Capability capabilities = 1;

  option (server_message_id) = CONN_CAPABILITIES; // comment_out_if PROTOBUF_LITE
}

/**
Get supported connection capabilities and their current state.

@returns @ref Mysqlx::Connection::Capabilities or @ref Mysqlx::Error
*/
message CapabilitiesGet {
  option (client_message_id) = CON_CAPABILITIES_GET; // comment_out_if PROTOBUF_LITE
}

/**
Set connection capabilities atomically.
Only provided values are changed, other values are left
unchanged. If any of the changes fails, all changes are
discarded.

@pre active sessions == 0

@returns @ref Mysqlx::Ok  or @ref Mysqlx::Error
*/
message CapabilitiesSet {
  required Capabilities capabilities = 1;

  option (client_message_id) = CON_CAPABILITIES_SET; // comment_out_if PROTOBUF_LITE
}

/**
Announce to the server that the client wants to close the connection.

It discards any session state of the server.

@returns @ref Mysqlx::Ok
*/
message Close {
  option (client_message_id) = CON_CLOSE; // comment_out_if PROTOBUF_LITE
}

message Compression {
  optional uint64 uncompressed_size = 1;
  optional Mysqlx.ServerMessages.Type server_messages = 2;
  optional Mysqlx.ClientMessages.Type client_messages = 3;
  required bytes payload = 4;

  option (server_message_id) = COMPRESSION; // comment_out_if PROTOBUF_LITE
  option (client_message_id) = COMPRESSION; // comment_out_if PROTOBUF_LITE
}

