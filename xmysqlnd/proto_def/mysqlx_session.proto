/*
  +----------------------------------------------------------------------+
  | PHP Version 7                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) The PHP Group                                |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.01 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_01.txt                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
*/
syntax = "proto2";

import "mysqlx.proto"; // comment_out_if PROTOBUF_LITE

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

/**
@namespace Mysqlx::Session
@brief Messages to manage sessions.

@startuml "Messages for Sessions"
== session start ==
Client -> Server: AuthenticateStart
opt
Server --> Client: AuthenticateContinue
Client --> Server: AuthenticateContinue
end
alt
Server --> Client: AuthenticateOk
else
Server --> Client: Error
end
...
== session reset ==
Client -> Server: Reset
Server --> Client: Ok
== session end ==
Client -> Server: Close
Server --> Client: Ok
@enduml
*/
package Mysqlx.Session;
option java_package = "com.mysql.cj.x.protobuf";

/**
The initial message send from the client to the server to start
the authentication process.

@returns @ref Mysqlx::Session::AuthenticateContinue
*/
message AuthenticateStart {
  /** authentication mechanism name */
  required string mech_name = 1;

  /** authentication data */
  optional bytes auth_data = 2;

  /** initial response */
  optional bytes initial_response = 3;

  option (client_message_id) = SESS_AUTHENTICATE_START; // comment_out_if PROTOBUF_LITE
}

/**
Send by client or server after an @ref Mysqlx::Session::AuthenticateStart
to exchange more authentication data.

@returns Mysqlx::Session::AuthenticateContinue
*/
message AuthenticateContinue {
  /** authentication data */
  required bytes auth_data = 1;

  option (server_message_id) = SESS_AUTHENTICATE_CONTINUE; // comment_out_if PROTOBUF_LITE
  option (client_message_id) = SESS_AUTHENTICATE_CONTINUE; // comment_out_if PROTOBUF_LITE
}

/**
Sent by the server after successful authentication.
*/
message AuthenticateOk {
  /** authentication data */
  optional bytes auth_data = 1;

  option (server_message_id) = SESS_AUTHENTICATE_OK; // comment_out_if PROTOBUF_LITE
}

/**
Reset the current session.

@returns @ref Mysqlx::Ok
*/
message Reset {
  /** if is true the session will be reset, but stays authenticated; otherwise,
      the session will be closed and needs to be authenticated again */
  optional bool keep_open = 1 [ default = false ];

  option (client_message_id) = SESS_RESET; // comment_out_if PROTOBUF_LITE
}

/**
Close the current session.

@returns @ref Mysqlx::Ok

*/
message Close {
  option (client_message_id) = SESS_CLOSE; // comment_out_if PROTOBUF_LITE
}

