/*
  +----------------------------------------------------------------------+
  | PHP Version 7                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) The PHP Group                                |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.01 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_01.txt                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
*/

syntax = "proto2";

// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

/**
@namespace Mysqlx::Cursor
@brief Handling of Cursors
*/

package Mysqlx.Cursor;
option java_package = "com.mysql.cj.x.protobuf";

import "mysqlx.proto"; // comment_out_if PROTOBUF_LITE
import "mysqlx_prepare.proto";


/**
Open a cursor

@startuml
client -> server: Open
alt Success
    ... none or partial Resultsets or full Resultsets ...
    client <- server: StmtExecuteOk
else Failure
    client <- server: Error
end alt
@enduml

@returns @ref Mysqlx::Ok
*/
message Open {
  /** client side assigned cursor id, the ID is going to represent
      new cursor and assigned to it statement */
  required uint32 cursor_id = 1;

  message OneOfMessage {
    enum Type {
      PREPARE_EXECUTE = 0;
    }
    required Type type = 1;

    optional Mysqlx.Prepare.Execute prepare_execute = 2;
  }
  /** statement which resultset is going to be iterated through the cursor */
  required OneOfMessage stmt = 4;

  /** number of rows which should be retrieved from sequential cursor */
  optional uint64 fetch_rows = 5;

  option (client_message_id) = CURSOR_OPEN; // comment_out_if PROTOBUF_LITE
}


/**
Fetch next portion of data from a cursor

@startuml
client -> server: Fetch
alt Success
  ... none or partial Resultsets or full Resultsets ...
  client <- server: StmtExecuteOk
else
 client <- server: Error
end
@enduml
*/
message Fetch {
  /** client side assigned cursor id, must be already open */
  required uint32 cursor_id = 1;

  /** number of rows which should be retrieved from sequential cursor */
  optional uint64 fetch_rows = 5;

  option (client_message_id) = CURSOR_FETCH; // comment_out_if PROTOBUF_LITE
}


/**
Close cursor

@startuml
client -> server: Close
alt Success
  client <- server: Ok
else Failure
  client <- server: Error
end
@enduml

@returns @ref Mysqlx::Ok or @ref Mysqlx::Error
*/
message Close {
  /** client side assigned cursor id, must be allocated/open */
  required uint32 cursor_id = 1;

  option (client_message_id) = CURSOR_CLOSE; // comment_out_if PROTOBUF_LITE
}
