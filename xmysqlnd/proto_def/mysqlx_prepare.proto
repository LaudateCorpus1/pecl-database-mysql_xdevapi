/*
  +----------------------------------------------------------------------+
  | PHP Version 7                                                        |
  +----------------------------------------------------------------------+
  | Copyright (c) The PHP Group                                |
  +----------------------------------------------------------------------+
  | This source file is subject to version 3.01 of the PHP license,      |
  | that is bundled with this package in the file LICENSE, and is        |
  | available through the world-wide-web at the following url:           |
  | http://www.php.net/license/3_01.txt                                  |
  | If you did not receive a copy of the PHP license and are unable to   |
  | obtain it through the world-wide-web, please send a note to          |
  | license@php.net so we can mail you a copy immediately.               |
  +----------------------------------------------------------------------+
*/
syntax = "proto2";


// ifdef PROTOBUF_LITE: option optimize_for = LITE_RUNTIME;

/**
@namespace Mysqlx::Prepare
@brief Handling of prepared statments
*/
package Mysqlx.Prepare;
option java_package = "com.mysql.cj.x.protobuf";

import "mysqlx.proto"; // comment_out_if PROTOBUF_LITE
import "mysqlx_sql.proto";
import "mysqlx_crud.proto";
import "mysqlx_datatypes.proto";


/**
Prepare a new statement

@startuml
  client -> server: Prepare
  alt Success
  client <- server: Ok
  else Failure
  client <- server: Error
  end
@enduml

@returns @ref Mysqlx::Ok or @ref Mysqlx::Error
*/
message Prepare {
  /** client side assigned statement id, which is going to identify
      the result of preparation */
  required uint32 stmt_id = 1;

  message OneOfMessage {
    // Determine which of optional fields was set by the client
    // (Workaround for missing "oneof" keyword in pb2.5)
    enum Type {
      FIND = 0;
      INSERT = 1;
      UPDATE = 2;
      DELETE = 4;
      STMT = 5;
    }
    required Type type = 1;

    optional Mysqlx.Crud.Find find = 2;
    optional Mysqlx.Crud.Insert insert = 3;
    optional Mysqlx.Crud.Update update = 4;
    optional Mysqlx.Crud.Delete delete = 5;
    optional Mysqlx.Sql.StmtExecute stmt_execute = 6;
  }

  /** defines one of following messages to be prepared:
      Crud::Find, Crud::Insert, Crud::Delete, Crud::Upsert, Sql::StmtExecute */
  required OneOfMessage stmt = 2;

  option (client_message_id) = PREPARE_PREPARE; // comment_out_if PROTOBUF_LITE
}


/**
Execute already prepared statement

@startuml

 client -> server: Execute
 alt Success
   ... Resultsets...
   client <- server: StmtExecuteOk
else Failure
   client <- server: Error
end
@enduml
@returns @ref Mysqlx::Ok
*/
message Execute {
  /** client side assigned statement id, must be already prepared */
  required uint32 stmt_id = 1;

  /** Arguments to bind to the prepared statement */
  repeated Mysqlx.Datatypes.Any args = 2;

  /** send only type information for
      @ref Mysqlx::Resultset::ColumnMetaData, skipping names and others */
  optional bool compact_metadata = 3 [ default = false ];

  option (client_message_id) = PREPARE_EXECUTE; // comment_out_if PROTOBUF_LITE
}


/**
Deallocate already prepared statement

@startuml
  client -> server: Deallocate
  alt Success
    client <- server: Ok
  else Failure
    client <- server: Error
  end
@enduml

@returns @ref Mysqlx::Ok or @ref Mysqlx::Error
*/
message Deallocate {
  /** client side assigned statement id, must be already prepared */
  required uint32 stmt_id = 1;

  option (client_message_id) = PREPARE_DEALLOCATE; // comment_out_if PROTOBUF_LITE
}
